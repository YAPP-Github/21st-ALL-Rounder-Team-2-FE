/* tslint:disable */
/* eslint-disable */
/**
 * YAPP 21st ALl2 API 명세서
 * YAPP 21st ALl2 API 명세서 입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 카테고리 Response
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 카테고리 아이디
     * @type {number}
     * @memberof CategoryDto
     */
    'id'?: number;
    /**
     * 카테고리 명
     * @type {string}
     * @memberof CategoryDto
     */
    'name'?: string;
    /**
     * 카테고리 순서
     * @type {number}
     * @memberof CategoryDto
     */
    'sequence'?: number;
    /**
     * 카테고리 별 전시수
     * @type {number}
     * @memberof CategoryDto
     */
    'postNum'?: number;
}
/**
 * 카테고리 생성 Request
 * @export
 * @interface CreateCategoryRequestDto
 */
export interface CreateCategoryRequestDto {
    /**
     * 카테고리 명
     * @type {string}
     * @memberof CreateCategoryRequestDto
     */
    'name'?: string;
}
/**
 * 카테고리 생성 Response
 * @export
 * @interface CreateCategoryResponseDto
 */
export interface CreateCategoryResponseDto {
    /**
     * 카테고리 아이디
     * @type {number}
     * @memberof CreateCategoryResponseDto
     */
    'id'?: number;
}
/**
 * 카테고리 수정 Request
 * @export
 * @interface UpdateCategoryRequestDto
 */
export interface UpdateCategoryRequestDto {
    /**
     * 수정할 이름
     * @type {string}
     * @memberof UpdateCategoryRequestDto
     */
    'name'?: string;
}

/**
 * CategoryControllerApi - axios parameter creator
 * @export
 */
export const CategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 사용자 카테고리 생성
         * @summary 카테고리 생성
         * @param {CreateCategoryRequestDto} createCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategories: async (createCategoryRequestDto: CreateCategoryRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryRequestDto' is not null or undefined
            assertParamExists('createCategories', 'createCategoryRequestDto', createCategoryRequestDto)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 카테고리 삭제
         * @summary 카테고리 삭제
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategory', 'id', id)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 사용자 카테고리 목록 조회
         * @summary 카테고리 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 카테고리 수정
         * @summary 카테고리 수정
         * @param {number} id 
         * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategory', 'id', id)
            // verify required parameter 'updateCategoryRequestDto' is not null or undefined
            assertParamExists('updateCategory', 'updateCategoryRequestDto', updateCategoryRequestDto)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 카테고리 순서를 변경합니다. 변경을 원하는 순서로 정렬시켜 배열에 담아 전달해주세요. 
         * @summary 카테고리 순서 변경
         * @param {Array<CategoryDto>} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategorySequence: async (categoryDto: Array<CategoryDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryDto' is not null or undefined
            assertParamExists('updateCategorySequence', 'categoryDto', categoryDto)
            const localVarPath = `/category/sequence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export const CategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 사용자 카테고리 생성
         * @summary 카테고리 생성
         * @param {CreateCategoryRequestDto} createCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategories(createCategoryRequestDto: CreateCategoryRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCategoryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategories(createCategoryRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 사용자 카테고리 삭제
         * @summary 카테고리 삭제
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 사용자 카테고리 목록 조회
         * @summary 카테고리 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 카테고리 수정
         * @summary 카테고리 수정
         * @param {number} id 
         * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, updateCategoryRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 카테고리 순서를 변경합니다. 변경을 원하는 순서로 정렬시켜 배열에 담아 전달해주세요. 
         * @summary 카테고리 순서 변경
         * @param {Array<CategoryDto>} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategorySequence(categoryDto: Array<CategoryDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategorySequence(categoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryControllerApi - factory interface
 * @export
 */
export const CategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryControllerApiFp(configuration)
    return {
        /**
         * 사용자 카테고리 생성
         * @summary 카테고리 생성
         * @param {CreateCategoryRequestDto} createCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategories(createCategoryRequestDto: CreateCategoryRequestDto, options?: any): AxiosPromise<CreateCategoryResponseDto> {
            return localVarFp.createCategories(createCategoryRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 카테고리 삭제
         * @summary 카테고리 삭제
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(id: number, options?: any): AxiosPromise<string> {
            return localVarFp.deleteCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 사용자 카테고리 목록 조회
         * @summary 카테고리 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): AxiosPromise<Array<CategoryDto>> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 카테고리 수정
         * @summary 카테고리 수정
         * @param {number} id 
         * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options?: any): AxiosPromise<string> {
            return localVarFp.updateCategory(id, updateCategoryRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 카테고리 순서를 변경합니다. 변경을 원하는 순서로 정렬시켜 배열에 담아 전달해주세요. 
         * @summary 카테고리 순서 변경
         * @param {Array<CategoryDto>} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategorySequence(categoryDto: Array<CategoryDto>, options?: any): AxiosPromise<string> {
            return localVarFp.updateCategorySequence(categoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export class CategoryControllerApi extends BaseAPI {
    /**
     * 사용자 카테고리 생성
     * @summary 카테고리 생성
     * @param {CreateCategoryRequestDto} createCategoryRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public createCategories(createCategoryRequestDto: CreateCategoryRequestDto, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).createCategories(createCategoryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 카테고리 삭제
     * @summary 카테고리 삭제
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategory(id: number, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).deleteCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 사용자 카테고리 목록 조회
     * @summary 카테고리 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategories(options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 카테고리 수정
     * @summary 카테고리 수정
     * @param {number} id 
     * @param {UpdateCategoryRequestDto} updateCategoryRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public updateCategory(id: number, updateCategoryRequestDto: UpdateCategoryRequestDto, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).updateCategory(id, updateCategoryRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 카테고리 순서를 변경합니다. 변경을 원하는 순서로 정렬시켜 배열에 담아 전달해주세요. 
     * @summary 카테고리 순서 변경
     * @param {Array<CategoryDto>} categoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public updateCategorySequence(categoryDto: Array<CategoryDto>, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).updateCategorySequence(categoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}


